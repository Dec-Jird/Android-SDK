package com.tnyoo.android.dotaxiyou.vivo;

import org.json.JSONException;
import org.json.JSONObject;

//import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
//import android.view.View;

import com.bbk.payment.payment.OnVivoPayResultListener;
import com.unity3d.player.UnityPlayer;
import com.unity3d.player.UnityPlayerActivity;
import com.vivo.sdkplugin.accounts.OnVivoAccountChangedListener;
import com.vivo.sdkplugin.aidl.VivoUnionManager;
import de.greenrobot.event.EventBus;

/**
 * UnityPlayerActivity
 * @author Administrator
 */
public class VivoU3DActivity extends UnityPlayerActivity {

	private static final String TAG = "PAY";
	private boolean showLog = true;
	private boolean assistViewShow = false;
	public String ViVoGameObj;
	private final static String LoginResultResp = "LoginResultResp";
	private final static String PayResultResp = "PayResultResp";
	private Context context;
	private VivoUnionManager mVivoUnionManager;

	@Override
	protected void onCreate(Bundle arg0) {
		// TODO Auto-generated method stub
		super.onCreate(arg0);
		context = UnityPlayer.currentActivity;
//		context = this;
//		 setContentView(R.layout.activity_vivo_u3d);

		// 在activity的onCreate方法中初始化“VivoUnionManager”对象
		mVivoUnionManager = new VivoUnionManager(context);
		mVivoUnionManager.bindUnionService();
		mVivoUnionManager.registVivoAccountChangeListener(accountListener);
		mVivoUnionManager
				.initVivoPaymentAndRecharge(context, payResultListener);

		if (EventBus.getDefault().isRegistered(this)) {
			EventBus.getDefault().unregister(this);
		}
		EventBus.getDefault().register(this, "onInitEvent");
		// 进入游戏主界面显示悬浮窗
		// showAssistView();
	}

	@Override
	protected void onPause() {
		hideAssistView();
		super.onPause();
	}

	@Override
	protected void onResume() {
		showAssistView();
		super.onResume();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		// 请在activity的onDestroy方法中调用如下方法，释放登录相关资源、
		mVivoUnionManager.unRegistVivoAccountChangeListener(accountListener);
		// 在activity的onDestroy()中注销payResultListener
		mVivoUnionManager.cancelVivoPaymentAndRecharge(payResultListener);
		// 在游戏主界面的activity的onDestroy方法中，调用悬浮窗关闭接口
		hideAssistView();
	}

	public void log(String str) {
		if (showLog)
			Log.i(TAG, str);
	}

	// -------------------sdk 接口 ------------------
	public void onInitEventMainThread(InitEvent event) {
		String str = event.getType();
		log("onInitEventMainThread type: " + str);
		if (str == "init") {
			// doSDKInit();
		} else if (str == "login") {
			doSDKLogin(event);
		} else if (str == "reportRoleInfo") {
			// 创建角色和升级调用同一个接口.
			doSDKReportRoleInfo(event);
		} else if (str == "pay") {
			doSDKPay(event);
		} else if (str == "doSDKShowAssistView") {
			// 在游戏主界面activity的onResume方法中，调用悬浮窗显示接口
			mVivoUnionManager.showVivoAssitView(context);
			// assistViewShow = true;
		} else if (str == "doSDKHideAssistView") {
			// 在游戏主界面的activity的onDestroy方法中，调用悬浮窗关闭接口
			mVivoUnionManager.hideVivoAssitView(context);
			// assistViewShow = false;
		}
	}

	public void init(String gameObj, boolean logOnOff) {
		this.ViVoGameObj = gameObj;
		this.showLog = logOnOff;
		// InitEvent event = new InitEvent();
		// event.setType("init");
		// EventBus.getDefault().post(event);
	}

	// public void doSDKInit() {
	// // -------------没有初始化函数-------------
	// }

	public void login(String appid) {
		// mVivoUnionManager.startLogin(appid);
		InitEvent event = new InitEvent();
		event.setType("login");
		event.setAppid(appid);
		EventBus.getDefault().post(event);
	}

	/** 启动vivo帐户登录界面 **/
	public void doSDKLogin(InitEvent event) {
		// 使用如下方法调用登录接口
		mVivoUnionManager.startLogin(event.getAppid());
	}

	/**
	 * 创角和升级调用同一个接口
	 * 
	 * @param roleid
	 *            游戏用于标识角色的id
	 * @param rolelevel
	 *            角色等级
	 * @param roleName
	 *            角色名称
	 * @param serviceArea
	 *            区服ID
	 * @param serviceAreaName
	 *            区服名称
	 */
	public void reportRoleInfo(String roleid, int rolelevel, String roleName,
			String serviceArea, String serviceAreaName) {
		InitEvent event = new InitEvent();
		event.setType("reportRoleInfo");
		event.setRoleId(roleid);
		event.setRolelevel(rolelevel);
		event.setServiceArea(serviceAreaName);
		event.setServiceAreaName(serviceAreaName);
		event.setRoleName(roleName);
		EventBus.getDefault().post(event);

		// VivoUnionManager.vivoAccountreportRoleInfo(roleid,
		// String.valueOf(rolelevel), serviceArea, roleName, context,
		// serviceAreaName);
	}

	public void doSDKReportRoleInfo(InitEvent event) {
		String roleLevel = String.valueOf(event.getRolelevel());

		VivoUnionManager.vivoAccountreportRoleInfo(event.getRoleId(),
				roleLevel, event.getServiceArea(), event.getRoleName(),
				context, event.getServiceAreaName());
	}

	/**
	 * 支付
	 * @param appID
	 *            应用id
	 * @param orderNumber
	 *            交易流水号，由订单推送接口返回
	 * @param accessKey
	 *            签名方法，由订单推送接口返回
	 * @param price
	 *            价格,单位为分（1000即10.00元）
	 * @param productName
	 *            商品名称
	 * @param productDes
	 *            商品描述 下面为游戏中信息：
	 * @param roleId
	 *            角色ID
	 * @param roleName
	 *            角色名
	 * @param serverName
	 *            游戏中区服信息
	 * @param party
	 *            工会
	 * @param extInfo
	 *            扩展数据
	 */
	public void pay(String appId, String orderNumber, String accessKey,
			long price, String productName, String productDes, int level,
			String blance, String vipLevel, String party, String extInfo) {
		// // 组织调用支付接口需要的参数，参考附录“启动vivo支付中心参数表”
		// Bundle localBundle = new Bundle();
		// localBundle.putString("transNo ", orderNumber); // 订单推送接口返回的vivo订单号
		// localBundle.putString("accessKey ", accessKey); // 订单推送接口返回的accessKey
		// localBundle.putString("appId ", appId); // 在vivo开发者平台注册应用后获取到的appId
		// localBundle.putString("productName ", productName); // 商品名称
		// localBundle.putString("productDes ", productDes);// 商品描述
		// localBundle.putLong("price ", price);// 商品价格，单位为分（1000即10.00元）
		//
		// // 以下为可选参数，能收集到务必填写，如未填写，掉单、用户密码找回等问题可能无法解决。
		// localBundle.putString("blance", blance);
		// localBundle.putString("vip", vipLevel);
		// localBundle.putInt("level", level);
		// localBundle.putString("party", party);
		// // localBundle.putString("roleId", "角色id");
		// // localBundle.putString("roleName", "角色名称角色名称角色名称");
		// // localBundle.putString("serverName", "区服信息");
		// localBundle.putString("extInfo", extInfo);
		// localBundle.putBoolean("logOnOff", showLog); //
		// CP在接入过程请传true值,接入完成后在改为false,
		// // 传true会在支付SDK打印大量日志信息
		// log("Pay args: " + localBundle.toString());
		// final Bundle payArgs = localBundle;
		// final Activity mActivity = (Activity) UnityPlayer.currentActivity;
		// mActivity.runOnUiThread(new Runnable() {
		// @Override
		// public void run() {
		// // 调用支付接口进行支付
		// mVivoUnionManager.payment(context, payArgs);
		// }
		// });
		InitEvent event = new InitEvent();
		event.setType("pay");
		event.setAppid(appId);
		event.setOrderNumber(orderNumber);
		event.setAccessKey(accessKey);
		event.setPrice(price);
		event.setProductName(productName);
		event.setProductDes(productDes);
		event.setRolelevel(level);
		event.setBlance(blance);
		event.setVipLevel(vipLevel);
		event.setParty(party);
		event.setExtInfo(extInfo);
		event.setLogOnOff(showLog);
		EventBus.getDefault().post(event);
	}

	// 支付.
	public void doSDKPay(InitEvent event) {
		Bundle localBundle = new Bundle();
		localBundle.putString("transNo", event.getOrderNumber());//
		// 交易流水号，由订单推送接口返回
		localBundle.putString("accessKey", event.getAccessKey());// 由订单推送接口返回
		localBundle.putString("productName", event.getProductName());// 商品名称
		localBundle.putString("productDes", event.getProductDes());// 商品描述
		localBundle.putLong("price", event.getPrice());// 价格,单位为分（1000即10.00元）
		localBundle.putString("appId", event.getAppid());//
		// appid为vivo开发者平台中生成的AppID

		// 以下为可选参数，能收集到务必填写，如未填写，掉单、用户密码找回等问题可能无法解决。
		localBundle.putString("blance", event.getBlance()); // 元宝数量
		localBundle.putString("vip", event.getVipLevel()); // vip 等级
		localBundle.putInt("level", event.getRolelevel()); // 角色等级
		localBundle.putString("party", event.getParty()); // 工会
		// localBundle.putString("roleId", event.getRoleId()); // 角色Id
		// localBundle.putString("roleName", event.getRoleName()); // 角色名称
		// localBundle.putString("serverName", event.getServiceAreaName());
		// //服务区名称
		localBundle.putString("extInfo", event.getExtInfo()); // 扩展数据
		localBundle.putBoolean("logOnOff", event.isLogOnOff());//
		// CP在接入过程请传true值,接入完成后在改为false,
		// 传true会在支付SDK打印大量日志信息

		// 调用支付接口进行支付
		mVivoUnionManager.payment(context, localBundle);
		log("Pay args: " + localBundle.toString());
	}

	public void showAssistView() {
		if (assistViewShow == true)
			return;

		mVivoUnionManager.showVivoAssitView(context);
		assistViewShow = true;
		// InitEvent event = new InitEvent();
		// event.setType("doSDKShowAssistView");
		// EventBus.getDefault().post(event);
	}

	public void hideAssistView() {
		if (assistViewShow == false)
			return;

		// 在游戏主界面的activity的onDestroy方法中，调用悬浮窗关闭接口
		mVivoUnionManager.hideVivoAssitView(context);
		assistViewShow = false;
		// log("doSDKHideAssistView");
		// InitEvent event = new InitEvent();
		// event.setType("doSDKHideAssistView");
		// EventBus.getDefault().post(event);
	}

	// 声明登录结果回调listener，通过该listener的“onAccountLogin“方法，获取登录的帐户信息。
	OnVivoAccountChangedListener accountListener = new OnVivoAccountChangedListener() {

		/**
		 * 通过该方法获取用户信息 authtoken：第三方游戏用此token到vivo帐户系统服务端校验帐户信息 openid：帐户唯一标识
		 * name:帐户名
		 */
		@Override
		public void onAccountLogin(String name, String openid, String authtoken) {
			JSONObject loginResultRespJson = new JSONObject();
			try {
				loginResultRespJson.put("name", name);
				loginResultRespJson.put("openid", openid);
				// authtoken：第三方游戏用此token到vivo用户系统服务端获取用户信息
				loginResultRespJson.put("authtoken", authtoken);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			log("Login callback loginResult: " + loginResultRespJson.toString());

			// 登录成功后调起活动界面，没有活动则不调起.
			// getPaymentAction();

			// 服务器验证登录只需用到authtoken，故只传authtoken。
			UnityPlayer.UnitySendMessage(ViVoGameObj, LoginResultResp,
					authtoken);
		}

		// 第三方游戏不需要使用此回调方法
		@Override
		public void onAccountRemove(boolean isRemoved) {
		}

		@Override
		// 取消登录的回调方法
		public void onAccountLoginCancled() {
			log("Login callback onAccountLoginCancled");
			// 登录被取消，传空
			UnityPlayer.UnitySendMessage(ViVoGameObj, LoginResultResp, "");
		}
	};

	/**
	 * 支付结果回调
	 */
	OnVivoPayResultListener payResultListener = new OnVivoPayResultListener() {
		// 通过该回调方法获取支付结果
		// transNo: 交易编号
		// pay_result:交易结果
		// result_code：状态码（参考附录“状态码(res_code)及描述”）
		// pay_msg:结果描述
		@Override
		public void payResult(String transNo, boolean pay_result,
				String result_code, String pay_msg) {

			JSONObject paymentResultRespJson = new JSONObject();
			try {
				paymentResultRespJson.put("trans_no", transNo);
				paymentResultRespJson.put("pay_result", pay_result);
				paymentResultRespJson.put("res_code", result_code);
				paymentResultRespJson.put("pay_msg", pay_msg);
			} catch (JSONException e) {
				e.printStackTrace();
			}
			log("Pay callback payResult: " + paymentResultRespJson.toString());
			UnityPlayer.UnitySendMessage(ViVoGameObj, PayResultResp,
					paymentResultRespJson + "");
		}

		// 第三方游戏不需要使用此回调方法
		@Override
		public void rechargeResult(String openid, boolean pay_result,
				String result_code, String pay_msg) {
		}
	};

	/*
	public void onClick(View view) {
		String AppID = "4f00a8c18074b6ca58eae73f3f30f5b3";

		switch (view.getId()) {
		case R.id.init:
			init("gameObj", true);
			break;
		case R.id.login:
			login(AppID);
			break;
		case R.id.createRole:
			reportRoleInfo("011102", 5, "1", "小黑", "1区");
			break;
		case R.id.getPaymentActionInfo:
//			getPaymentActionInfo();
			break;
		case R.id.pay:
			String accessKey = "a8ba4a2ed58b4fa5c44e93fa30b4d610";
			String orderNumber = "2016041410185362400012137909";
			// 价格必须和订单推送价格一致.
			pay(AppID, orderNumber, accessKey, 600, "60元宝", "60元宝", 6, "365", "3",
					"刀剑神域", "tnyoovivovivopay");
			break;
		case R.id.switchAccount:
//			switchAccount();
			break;
		}
	} 
//	*/

}
